function out = em_saccade_blink_detection(t,x,y,varargin)
%em_saccade_blink_detection  - detects saccades and blinks from eye position data
%
% USAGE:	
% out = em_saccade_blink_detection(t,x,y,varargin)
%
% INPUTS:
%		t		- time axis (seconds)
%		x		- hor position (deg)
%		y		- ver position (deg)
%		varargin	- can be struct with (fieldname - value) pairs or multiple (field)name - value pairs
%				- see default parameters 
% OUTPUTS:
%		output1		- explanation
%		
% REQUIRES:	Neuroelf, Igtools, em
%
% See also em_smooth, em_filter
%
%
% Author(s):	I.Kagan, DAG, DPZ
% URL:		http://www.dpz.eu/dag
%
% Change log:
% 2015-08-07:	Created function (Igor Kagan)
% ...
% $Revision: 1.0 $  $Date: 2015-08-07 17:43:24 $

% ADDITIONAL INFO:
% ...
%%%%%%%%%%%%%%%%%%%%%%%%%[DAG mfile header version 1]%%%%%%%%%%%%%%%%%%%%%%%%% 



% default parameters
defpar = { ...
	'SampleRate',		'double',	'nonempty',	1000, ...		% Hz
	'SacOnsetVelThr',	'double',	'nonempty',	100; ...		% deg/s
	'SacOffsetVelThr',	'double',	'nonempty',	20; ...			% deg/s
	'MinSacDuration',	'double',	'nonempty',	0.02; ...		% s
	'VelAdaptiveThr',	'logical',	'nonempty',	0, ...			% 0 or 1
	'VelSmoothConvWin',	'char',		'nonempty',	'rectwin'; ...		% 'rectwin', 'gausswin', etc. see 'help window'
	'VelSmoothConvLen',	'double',	'nonempty',	0.01; ...		% s, length of conv kernel, set to 0 of no smooting
	'VelFilterCutoff',	'double',	'nonempty',	0, ...			% Hz, set to 0 if no filter
	
	'Plot',		'logical',	'nonempty',	0, ...			% 0 or 1
	};

if nargin > 3, % specified dynamic par	
	if ~isstruct(varargin{1}),
		par = struct(varargin{:});
	else
		par = varargin{1};
	end	
	par = checkstruct(par, defpar);
else
	par = checkstruct(struct, defpar);
end

original_SI = mode(diff(t)); % original sampling interval

if length(unique(diff(t)) > 1 || original_SI ~= 1/1/par.SampleRate, % resample 
	 ti = t(1) : 1/par.SampleRate : t(end);
	 xi = interp1(t, x, ti, 'linear');
	 yi = interp1(t, y, ti, 'linear');
	 
	 t = ti;
	 x = xi;
	 y = yi;
end

% Velocity
v = [0 sqrt( (diff(x).*par.SampleRate).^2+(diff(y).*par.SampleRate).^2 )];

if par.VelSmoothConv
	v = em_smooth(v,par.VelSmoothConvWin,par.VelSmoothConvLen);
end

if par.VelFilterCutoff
	v = em_filter(v,par.VelFilterCutoff,par.SampleRate);
end

